//#pragma GCC optimize("Ofast,unroll-loops")
//#pragma GCC target("avx,avx2,fma")
//#pragma GCC optimize("trapv")
//#include <bits/stdc++.h>
 
#include <iostream>
#include <cmath>
#include <iomanip>
#include <numeric>
#include <algorithm>
 
#include <chrono>
#include <ctime>
#include <random>
 
#include <list>
#include <string>
#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include <unordered_map>
#include <unordered_set>
 
#include <map>
#include <queue>
#include <cassert>
#include <algorithm>
#include <functional>
 
#include <fstream>
#include <sstream>
 
 
#define isz(x) (int)x.size()
#define all(x) (x).begin(),(x).end()
 
using namespace std;
 
template<typename T>
using PriorityQueue = priority_queue<T, vector<T>, greater<T>>;
 
template<typename T>
using MAP = map<T, T, greater<T>>;
 
template<typename T>
using SET = set<T, T, greater<T>>;
 
template<typename T>
using MULTISET = multiset<T, T, greater<T>>;
 
 
 
using ll = long long;
using vll = vector<long long>;
using vvll = vector<vll>;
 
using ull = unsigned long long;
 
 
using vi = vector<int>;
using vvi = vector<vi>;
using vvvi = vector<vvi>;
 
namespace Random
{
    std::mt19937 mt{ std::random_device{}() };
 
    int get(int min, int max)
    {
        std::uniform_int_distribution<> die{ min, max };
        return die(mt);
    }
}
 
 
class Timer
{
private:
    using Clock = std::chrono::steady_clock;
    using Second = std::chrono::duration<double, std::ratio<1> >;
    std::chrono::time_point<Clock> m_beg{ Clock::now() };
public:
 
    void reset()
    {
        m_beg = Clock::now();
    }
 
    double elapsed() const
    {
        return std::chrono::duration_cast<Second>(Clock::now() - m_beg).count();
    }
};
 
 
template<typename T>
std::istream& operator>>(std::istream& in, vector<T>& vec)
{
    for (auto& it : vec)
        in >> it;
    return in;
}
 
// Overload vector output
template<typename T>
std::ostream& operator<<(std::ostream& out, const std::vector<T>& vec)
{
    for (auto& it : vec)
        out << it << ' ';
 
    return out;
}
 
 
ll binpow(ll a, ll n)
{
    if (!n) return 1;
 
    ll res{ 1 };
    while (n)
    {
        if (n & 1)
            res *= a;
        a *= a;
        n >>= 1;
    }
    return res;
}
 
ll binpow(ll a, ll n, ll mod)
{
    if (!n) return 1;
 
    ll res = 1 % mod;
    while (n)
    {
        if (n & 1)
        {
            res *= a;
            res %= mod;
        }
        a *= a;
        a %= mod;
        n >>= 1;
 
    }
 
    return res % mod;
}
 
 
// РџРµСЂРµР±РѕСЂ РЅР°РїСЂР°РІР»РµРЅРёР№
const int N[4][2] = {
          {-1,0}, {0, 1}, {1,0}, {0,-1}
};
 
const int INF = int(1e9);
const ll INFL = ll(1e18);
const ull INFUL = ull(1e19);
 
const ll MOD = 1000000000 + 7;
 
const int UNDEF = -1;
////////////////////////////////////////////////////////////////////////////////////
 
using vpii = vector<pair<int, int >>;
using vpll = vector<pair<ll, ll>>;
 
 
 
//#define int ll
 
int first(const vi& vec, int j, int median)
{
    ++j;
    while (j < isz(vec) && vec[j] >= median) ++j;
 
    return j;
}
 
int second(const vi& vec, int i, int median)
{
    ++i;
    while (i < isz(vec) && vec[i] <= median) ++i;
 
    return i;
}
 
void solve1()
{
    int n; cin >> n;
    vi vec(n); cin >> vec;
 
    ll sum = std::accumulate(all(vec), 0LL);
    int median = sum / n;
 
    int i{}, j{};
    j = first(vec, j, median);
 
    while (i < isz(vec) && j < isz(vec))
    {
        if (i >= j)
            break;
        int x1 = vec[i] - median;
        int x2 = median - vec[j];
 
        int delta = min(x1, x2);
        vec[i] -= delta; vec[j] += delta;
 
        if(vec[i] <= median)
            i = second(vec, i, median);
        if(vec[j] >= median)
            j = first(vec, j, median);
    }
 
    for(auto& it : vec)
        if (it != median)
        {
            cout << "NO\n";
            return;
        }
 
    cout << "YES\n";
 
}
 
int maximum_prefix(const vi& vec)
{
    int curr = vec[0];
    int ans{};
    while (ans < isz(vec) && vec[ans] == curr)++ans;
 
    return min(ans, isz(vec) - 1);
}
 
int maximum_suffix(const vi& vec)
{
    int curr = vec[isz(vec) - 1];
    int ans = isz(vec) - 1;
 
    while (ans >= 0 && vec[ans] == curr) --ans;
 
    return max(0, ans);
}
 
void solve()
{
    int n, m; cin >> n >> m;
    ll cnt{}, ans{};
    vi vec(n);
    for(int i = 0; i < n; ++i)
    {
        string s; cin >> s;
        cnt += isz(s);
        vec[i] = stoi(s);
    }
 
    if (cnt <= m) {
        cout << "Anna\n";
        return;
    }
 
    std::sort(all(vec), [&](const auto& x, const auto& y)
        {
            int x1 = x, y1 = y, cnt1{}, cnt2{};
            while (x1 % 10 == 0)
                x1 /= 10, ++cnt1;
            while (y1 % 10 == 0)
                y1 /= 10, ++cnt2;
 
            return cnt1 > cnt2;
        });
 
    bool step{};
    for (int i = 0; i < n; ++i)
    {
        if (!step) {
            string s = to_string(vec[i]);
            reverse(all(s));
            vec[i] = stoi(s);
        }
        //else if (i + 1 < n)
        //    ans += isz(to_string(vec[i])), ++i;
        ans += isz(to_string(vec[i]));
        step = !step;
    }
 
    cout << (ans <= m ? "Anna\n" : "Sasha\n");
 
}
 
 
int32_t main()
{
    cin.tie(0);
    std::ios_base::sync_with_stdio(false);
 
    int32_t t{ 1 };
    cin >> t;
    while (t--)
        solve();
    return 0;
}