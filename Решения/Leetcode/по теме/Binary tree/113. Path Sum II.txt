/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>>result;
    vector<int>res;

    void findPaths_w_Sum(TreeNode* root, int targetSum) {
        res.push_back(root->val);
        // current node has no children
        if (root->left == NULL && root->right == NULL) {
            if (root->val == targetSum) {
                result.push_back(res);
                res.pop_back();
                return;
            }
            else {
                res.pop_back();
                return;
            }
        }
        // it does have children
        // bool flag_left = false, flag_right = false;
        if (root->left != NULL)
            findPaths_w_Sum(root->left, targetSum - root->val);
        if (root->right != NULL)
            findPaths_w_Sum(root->right, targetSum - root->val);

        res.pop_back();
        return;
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        // tree is empty
        if (root == NULL)
            return result;
        // it`s not
        findPaths_w_Sum(root, targetSum);
        return result;
    }
};