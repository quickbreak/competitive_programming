/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>result;
        if (root == NULL)
            return result;

        queue<pair<Node*, int>>q;
        Node* u = root;
        int level = 0;
        q.push(make_pair(u, 0));
        vector<int>res;
        while (q.size() > 0) {
            u = q.front().first;
            if (level == q.front().second){
                res.push_back(u->val);
            }
            else {
                ++level;
                result.push_back(res);
                res = {u->val};
            }

            q.pop();
            for (Node* v : u->children) {
                q.push(make_pair(v, level + 1));
            }
        }
        result.push_back(res);
        return result;
    }
};