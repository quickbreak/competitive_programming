/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>result;
        if (root == NULL)
            return result;

        stack<pair<TreeNode*, int>>st;
        TreeNode* u  = root;
        int my_kids_added = 0;
        st.push(make_pair(u, 0));
        while (!st.empty()) {
            u = st.top().first;
            my_kids_added = st.top().second;
            st.pop();
            if (my_kids_added == 1) 
                result.push_back(u->val);
            else {
                // my_kids_added = 1;
                if (u->right != NULL)
                    st.push(make_pair(u->right, 0));
                st.push(make_pair(u, 1));
                if (u->left != NULL)
                    st.push(make_pair(u->left, 0));

            }
        }

        return result;
    }
};